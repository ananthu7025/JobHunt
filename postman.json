{
  "info": {
    "name": "JobHunt API - Telegram Hiring Bot",
    "description": "Complete API collection for JobHunt application with MongoDB, Node.js, Telegram Bot integration, and Google Gemini AI for resume analysis, dynamic cover letter generation, and automated emailing.",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "jobId",
      "value": "",
      "type": "string"
    },
    {
      "key": "questionSetId",
      "value": "",
      "type": "string"
    },
    {
      "key": "candidateId",
      "value": "",
      "type": "string"
    },
    {
      "key": "telegramId",
      "value": "",
      "type": "string"
    },
    {
      "key": "resumeScoreId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🔐 Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        pm.collectionVariables.set('authToken', response.data.token);",
                  "        pm.collectionVariables.set('userId', response.data.user.id);",
                  "        pm.test('User registered successfully', () => {",
                  "            pm.expect(response.success).to.be.true;",
                  "            pm.expect(response.data.user.email).to.exist;",
                  "            pm.expect(response.data.token).to.exist;",
                  "        });",
                  "    }",
                  "} else {",
                  "    pm.test('Registration failed with proper error', () => {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.success).to.be.false;",
                  "        pm.expect(response.message).to.exist;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"HR Manager\",\n  \"email\": \"hr@company.com\",\n  \"password\": \"password123\",\n  \"role\": \"hr\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user (HR or Admin)"
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        pm.collectionVariables.set('authToken', response.data.token);",
                  "        pm.collectionVariables.set('userId', response.data.user.id);",
                  "        pm.test('Login successful', () => {",
                  "            pm.expect(response.success).to.be.true;",
                  "            pm.expect(response.data.user.email).to.exist;",
                  "            pm.expect(response.data.token).to.exist;",
                  "        });",
                  "    }",
                  "} else {",
                  "    pm.test('Login failed with proper error', () => {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.success).to.be.false;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"hr@company.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with email and password"
          }
        },
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile retrieved successfully', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.email).to.exist;",
                  "    pm.expect(response.data.name).to.exist;",
                  "    pm.expect(response.data.role).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            },
            "description": "Get current user profile (requires authentication)"
          }
        }
      ],
      "description": "Authentication endpoints for user registration, login, and profile management"
    },
    {
      "name": "❓ Question Set Management",
      "item": [
        {
          "name": "Create Question Set",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        pm.collectionVariables.set('questionSetId', response.data._id);",
                  "        pm.test('Question set created successfully', () => {",
                  "            pm.expect(response.success).to.be.true;",
                  "            pm.expect(response.data.title).to.exist;",
                  "            pm.expect(response.data.questions).to.be.an('array');",
                  "        });",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Software Developer Application\",\n  \"description\": \"Complete application form for software developer positions\",\n  \"questions\": [\n    {\n      \"step\": 1,\n      \"field\": \"firstName\",\n      \"question\": \"What is your first name?\",\n      \"type\": \"text\",\n      \"required\": true\n    },\n    {\n      \"step\": 2,\n      \"field\": \"lastName\",\n      \"question\": \"What is your last name?\",\n      \"type\": \"text\",\n      \"required\": true\n    },\n    {\n      \"step\": 3,\n      \"field\": \"email\",\n      \"question\": \"What is your email address?\",\n      \"type\": \"email\",\n      \"required\": true\n    },\n    {\n      \"step\": 4,\n      \"field\": \"phone\",\n      \"question\": \"What is your phone number?\",\n      \"type\": \"text\",\n      \"required\": true\n    },\n    {\n      \"step\": 5,\n      \"field\": \"experience\",\n      \"question\": \"How many years of programming experience do you have?\",\n      \"type\": \"text\",\n      \"required\": true\n    },\n    {\n      \"step\": 6,\n      \"field\": \"skills\",\n      \"question\": \"What programming languages and technologies are you proficient in?\",\n      \"type\": \"text\",\n      \"required\": true\n    }\n  ],\n  \"isActive\": true,\n  \"isDefault\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/questionsets",
              "host": ["{{baseUrl}}"],
              "path": ["questionsets"]
            },
            "description": "Create a new question set for the Telegram bot"
          }
        },
        {
          "name": "Get All Question Sets",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Question sets retrieved successfully', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.questionSets).to.be.an('array');",
                  "    pm.expect(response.data.pagination).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/questionsets?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["questionsets"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all question sets with pagination"
          }
        },
        {
          "name": "Get Active Question Sets",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/questionsets/active",
              "host": ["{{baseUrl}}"],
              "path": ["questionsets", "active"]
            },
            "description": "Get all active question sets"
          }
        },
        {
          "name": "Get Question Set by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/questionsets/{{questionSetId}}",
              "host": ["{{baseUrl}}"],
              "path": ["questionsets", "{{questionSetId}}"]
            },
            "description": "Get a specific question set by ID"
          }
        },
        {
          "name": "Update Question Set",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Software Developer Application\",\n  \"description\": \"Updated complete application form for software developer positions\",\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/questionsets/{{questionSetId}}",
              "host": ["{{baseUrl}}"],
              "path": ["questionsets", "{{questionSetId}}"]
            },
            "description": "Update an existing question set"
          }
        },
        {
          "name": "Delete Question Set",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/questionsets/{{questionSetId}}",
              "host": ["{{baseUrl}}"],
              "path": ["questionsets", "{{questionSetId}}"]
            },
            "description": "Delete a question set"
          }
        }
      ],
      "description": "Question set management endpoints for Telegram bot applications"
    },
    {
      "name": "👥 Candidate Management",
      "item": [
        {
          "name": "Get All Completed Candidates",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/candidates?questionSetId={{questionSetId}}",
              "host": ["{{baseUrl}}"],
              "path": ["candidates"],
              "query": [
                {
                  "key": "questionSetId",
                  "value": "{{questionSetId}}"
                }
              ]
            },
            "description": "Get all completed candidate applications"
          }
        },
        {
          "name": "Get All Candidates (Including Incomplete)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/candidates/all?questionSetId={{questionSetId}}",
              "host": ["{{baseUrl}}"],
              "path": ["candidates", "all"],
              "query": [
                {
                  "key": "questionSetId",
                  "value": "{{questionSetId}}"
                }
              ]
            },
            "description": "Get all candidates including incomplete applications"
          }
        },
        {
          "name": "Get Candidate Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/candidates/stats?questionSetId={{questionSetId}}",
              "host": ["{{baseUrl}}"],
              "path": ["candidates", "stats"],
              "query": [
                {
                  "key": "questionSetId",
                  "value": "{{questionSetId}}"
                }
              ]
            },
            "description": "Get candidate application statistics"
          }
        },
        {
          "name": "Export Candidates",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/candidates/export?questionSetId={{questionSetId}}",
              "host": ["{{baseUrl}}"],
              "path": ["candidates", "export"],
              "query": [
                {
                  "key": "questionSetId",
                  "value": "{{questionSetId}}"
                }
              ]
            },
            "description": "Export candidate data in a structured format"
          }
        },
        {
          "name": "Get Candidate by Telegram ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/candidates/{{telegramId}}",
              "host": ["{{baseUrl}}"],
              "path": ["candidates", "{{telegramId}}"]
            },
            "description": "Get a specific candidate by their Telegram ID"
          }
        },
        {
          "name": "Delete Candidate",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/candidates/{{telegramId}}",
              "host": ["{{baseUrl}}"],
              "path": ["candidates", "{{telegramId}}"]
            },
            "description": "Delete a candidate by their Telegram ID"
          }
        },
        {
          "name": "Rank Candidates by Job",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/candidates/rank?jobId={{jobId}}&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "candidates",
                "rank"
              ],
              "query": [
                {
                  "key": "jobId",
                  "value": "{{jobId}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get a ranked list of top candidates for a specific job based on their resume scores"
          }
        },
        {
          "name": "Get Candidates With Resumes",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/candidates/with-resumes",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "candidates",
                "with-resumes"
              ]
            },
            "description": "Get a list of candidates who have submitted resumes"
          }
        },
        {
          "name": "Get Resume Info",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/candidates/{{telegramId}}/resume",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "candidates",
                "{{telegramId}}",
                "resume"
              ]
            },
            "description": "Get resume information for a specific candidate"
          }
        },
        {
          "name": "Download Resume",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/candidates/{{telegramId}}/resume/download",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "candidates",
                "{{telegramId}}",
                "resume",
                "download"
              ]
            },
            "description": "Download a candidate's resume"
          }
        },
        {
          "name": "Delete Resume",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/candidates/{{telegramId}}/resume",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "candidates",
                "{{telegramId}}",
                "resume"
              ]
            },
            "description": "Delete a candidate's resume"
          }
        }
      ],
      "description": "Candidate management endpoints for Telegram bot applications"
    },
    {
      "name": "🤖 Bot Management",
      "item": [
        {
          "name": "Get Bot Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/bot/stats?questionSetId={{questionSetId}}",
              "host": ["{{baseUrl}}"],
              "path": ["bot", "stats"],
              "query": [
                {
                  "key": "questionSetId",
                  "value": "{{questionSetId}}"
                }
              ]
            },
            "description": "Get Telegram bot statistics"
          }
        },
        {
          "name": "Get Bot Info",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/bot/info",
              "host": ["{{baseUrl}}"],
              "path": ["bot", "info"]
            },
            "description": "Get Telegram bot information and status"
          }
        },
        {
          "name": "Get Question Sets for Bot",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/bot/questionsets",
              "host": ["{{baseUrl}}"],
              "path": ["bot", "questionsets"]
            },
            "description": "Get active question sets available for the bot"
          }
        },
        {
          "name": "Set Active Question Set",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"questionSetId\": \"{{questionSetId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bot/questionsets/set-active",
              "host": ["{{baseUrl}}"],
              "path": ["bot", "questionsets", "set-active"]
            },
            "description": "Set the active question set for the bot"
          }
        },
        {
          "name": "Broadcast Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"📢 Important announcement: We have new job openings available! Please check our latest positions.\",\n  \"targetType\": \"all\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bot/broadcast",
              "host": ["{{baseUrl}}"],
              "path": ["bot", "broadcast"]
            },
            "description": "Broadcast a message to candidates via Telegram bot"
          }
        }
      ],
      "description": "Telegram bot management and communication endpoints"
    },
    {
      "name": "💼 Job Management",
      "item": [
        {
          "name": "Create Job Description",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Senior Full Stack Developer\",\n  \"company\": \"TechCorp Inc.\",\n  \"description\": \"We are looking for an experienced Full Stack Developer to join our team.\",\n  \"requiredSkills\": [\"JavaScript\", \"TypeScript\", \"React.js\", \"Node.js\", \"MongoDB\"],\n  \"experience\": \"3-5 years\",\n  \"location\": \"Remote\",\n  \"jobType\": \"full-time\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/jobs",
              "host": ["{{baseUrl}}"],
              "path": ["jobs"]
            },
            "description": "Create a new job description"
          }
        },
        {
          "name": "Get All Jobs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/jobs?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["jobs"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all job descriptions with pagination"
          }
        }
      ],
      "description": "Job description management endpoints"
    },
    {
      "name": "📄 Resume Scanning",
      "item": [
        {
          "name": "Scan Resume",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "resume",
                  "type": "file",
                  "src": "sample_resume.pdf",
                  "description": "Upload a PDF, DOC, or DOCX resume file"
                },
                {
                  "key": "jobId",
                  "value": "{{jobId}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/resume/scan",
              "host": ["{{baseUrl}}"],
              "path": ["resume", "scan"]
            },
            "description": "Upload and scan a resume against a job description using Gemini AI"
          }
        },
        {
          "name": "Get Resume Scores",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/resume/scores?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["resume", "scores"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all resume scores with optional filters"
          }
        }
      ],
      "description": "Resume scanning and scoring endpoints"
    },
    {
      "name": "🏥 Health Check",
      "item": [
        {
          "name": "Server Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check if the server is running and healthy"
          }
        }
      ],
      "description": "Health check endpoint to verify server status"
    }
  ]
}
