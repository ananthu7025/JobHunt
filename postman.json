{
  "info": {
    "name": "Resume Scanner API",
    "description": "Complete API collection for Resume Scanner application with MongoDB, Node.js, and Google Gemini AI integration",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000/api",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "jobId",
      "value": "",
      "type": "string"
    },
    {
      "key": "resumeScoreId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🔐 Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        pm.collectionVariables.set('authToken', response.data.token);",
                  "        pm.collectionVariables.set('userId', response.data.user.id);",
                  "        pm.test('User registered successfully', () => {",
                  "            pm.expect(response.success).to.be.true;",
                  "            pm.expect(response.data.user.email).to.exist;",
                  "            pm.expect(response.data.token).to.exist;",
                  "        });",
                  "    }",
                  "} else {",
                  "    pm.test('Registration failed with proper error', () => {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.success).to.be.false;",
                  "        pm.expect(response.message).to.exist;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\",\n  \"role\": \"hr\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user (HR or Admin)"
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        pm.collectionVariables.set('authToken', response.data.token);",
                  "        pm.collectionVariables.set('userId', response.data.user.id);",
                  "        pm.test('Login successful', () => {",
                  "            pm.expect(response.success).to.be.true;",
                  "            pm.expect(response.data.user.email).to.exist;",
                  "            pm.expect(response.data.token).to.exist;",
                  "        });",
                  "    }",
                  "} else {",
                  "    pm.test('Login failed with proper error', () => {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.success).to.be.false;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with email and password"
          }
        },
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile retrieved successfully', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.email).to.exist;",
                  "    pm.expect(response.data.name).to.exist;",
                  "    pm.expect(response.data.role).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            },
            "description": "Get current user profile (requires authentication)"
          }
        }
      ],
      "description": "Authentication endpoints for user registration, login, and profile management"
    },
    {
      "name": "💼 Job Management",
      "item": [
        {
          "name": "Create Job Description",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        pm.collectionVariables.set('jobId', response.data._id);",
                  "        pm.test('Job created successfully', () => {",
                  "            pm.expect(response.success).to.be.true;",
                  "            pm.expect(response.data.title).to.exist;",
                  "            pm.expect(response.data.requiredSkills).to.be.an('array');",
                  "        });",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Senior Full Stack Developer\",\n  \"company\": \"TechCorp Inc.\",\n  \"description\": \"We are looking for an experienced Full Stack Developer to join our team. The ideal candidate will have strong skills in both frontend and backend development, with experience in modern web technologies.\",\n  \"requiredSkills\": [\n    \"JavaScript\",\n    \"TypeScript\",\n    \"React.js\",\n    \"Node.js\",\n    \"MongoDB\",\n    \"Express.js\",\n    \"REST APIs\",\n    \"Git\"\n  ],\n  \"preferredSkills\": [\n    \"Next.js\",\n    \"GraphQL\",\n    \"Docker\",\n    \"AWS\",\n    \"Redis\",\n    \"PostgreSQL\"\n  ],\n  \"experience\": \"3-5 years of professional experience in full stack development\",\n  \"location\": \"San Francisco, CA (Remote Available)\",\n  \"jobType\": \"full-time\",\n  \"salaryRange\": {\n    \"min\": 120000,\n    \"max\": 160000\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/jobs",
              "host": ["{{baseUrl}}"],
              "path": ["jobs"]
            },
            "description": "Create a new job description"
          }
        },
        {
          "name": "Get All Jobs",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Jobs retrieved successfully', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.jobs).to.be.an('array');",
                  "    pm.expect(response.data.pagination).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/jobs?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["jobs"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all job descriptions with pagination"
          }
        },
        {
          "name": "Get Job by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Job retrieved successfully', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data._id).to.exist;",
                  "    pm.expect(response.data.title).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/jobs/{{jobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["jobs", "{{jobId}}"]
            },
            "description": "Get a specific job description by ID"
          }
        },
        {
          "name": "Update Job Description",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Senior Full Stack Developer (Updated)\",\n  \"salaryRange\": {\n    \"min\": 130000,\n    \"max\": 170000\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/jobs/{{jobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["jobs", "{{jobId}}"]
            },
            "description": "Update an existing job description"
          }
        },
        {
          "name": "Delete Job Description",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/jobs/{{jobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["jobs", "{{jobId}}"]
            },
            "description": "Delete a job description"
          }
        }
      ],
      "description": "Job description management endpoints"
    },
    {
      "name": "📄 Resume Scanning",
      "item": [
        {
          "name": "Scan Resume",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        pm.collectionVariables.set('resumeScoreId', response.data._id);",
                  "        pm.test('Resume scanned successfully', () => {",
                  "            pm.expect(response.success).to.be.true;",
                  "            pm.expect(response.data.scores.overall).to.be.a('number');",
                  "            pm.expect(response.data.analysis.matchedSkills).to.be.an('array');",
                  "            pm.expect(response.data.candidateName).to.exist;",
                  "        });",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "resume",
                  "type": "file",
                  "src": "sample_resume.pdf",
                  "description": "Upload a PDF, DOC, or DOCX resume file"
                },
                {
                  "key": "jobId",
                  "value": "{{jobId}}",
                  "type": "text"
                },
                {
                  "key": "additionalRequirements",
                  "value": "Must have experience with cloud platforms and microservices architecture",
                  "type": "text"
                },
                {
                  "key": "weightage",
                  "value": "{\"skills\": 35, \"experience\": 30, \"education\": 15, \"keywords\": 20}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/resume/scan",
              "host": ["{{baseUrl}}"],
              "path": ["resume", "scan"]
            },
            "description": "Upload and scan a resume against a job description using Gemini AI"
          }
        },
        {
          "name": "Get Resume Scores",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Resume scores retrieved successfully', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.scores).to.be.an('array');",
                  "    pm.expect(response.data.pagination).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/resume/scores?page=1&limit=10&minScore=50",
              "host": ["{{baseUrl}}"],
              "path": ["resume", "scores"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "jobId",
                  "value": "{{jobId}}",
                  "disabled": true
                },
                {
                  "key": "minScore",
                  "value": "50"
                }
              ]
            },
            "description": "Get all resume scores with optional filters"
          }
        },
        {
          "name": "Get Resume Score by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Resume score details retrieved successfully', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data._id).to.exist;",
                  "    pm.expect(response.data.scores).to.exist;",
                  "    pm.expect(response.data.analysis).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/resume/scores/{{resumeScoreId}}",
              "host": ["{{baseUrl}}"],
              "path": ["resume", "scores", "{{resumeScoreId}}"]
            },
            "description": "Get detailed analysis of a specific resume score"
          }
        }
      ],
      "description": "Resume scanning and scoring endpoints"
    },
    {
      "name": "🏥 Health Check",
      "item": [
        {
          "name": "Server Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Server is healthy', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.timestamp).to.exist;",
                  "    pm.expect(response.data.uptime).to.be.a('number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check if the server is running and healthy"
          }
        }
      ],
      "description": "Health check endpoint to verify server status"
    }
  ]
}